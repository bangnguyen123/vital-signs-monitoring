version: '3.8'
services:
  postgres:
    image: postgres:latest
    platform: linux/arm64  # Match your ARM system
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: vitals
    ports:
      - "5432:5432"
    volumes:
      - ../sql:/sql
      - ../data:/data
      - ../sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  sqlserver:
    build: ./sqlserver/
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: StrongPass!
    ports:
      - "1433:1433"
    volumes:
      - ../sql:/sql

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/arm64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    platform: linux/arm64
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Simplified to match LISTENERS
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-connect:
    build:
      context: ./kafka
      dockerfile: kafka-connect.dockerfile
    platform: linux/arm64
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: "/usr/share/confluent-hub-components"
    volumes:
      - ./kafka/kafka-connectors-init.sh:/init/init-connectors.sh
      - ./kafka/kafka_connect_config/source.json:/init/source.json
      - ./kafka/kafka_connect_config/sink.json:/init/sink.json
    command: >
      bash -c "/etc/confluent/docker/run & sleep 20 && bash /init/init-connectors.sh && wait"

  producer:
    image: python:3.9
    platform: linux/arm64
    depends_on:
      - kafka
    volumes:
      - ../kafka:/app
      - ../data:/data  # Mount the data folder
    command: ["bash", "-c", "pip install confluent-kafka && python /app/producer.py"]

  consumer:
    image: python:3.9
    platform: linux/arm64
    depends_on:
      kafka:
        condition: service_healthy  # Wait for Kafka to be healthy
    volumes:
      - ../kafka:/app
    command: ["bash", "-c", "pip install confluent-kafka && python /app/consumer.py"]
